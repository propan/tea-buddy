/*
 * This file is generated by jOOQ.
 */
package com.github.propan.teabuddy.repository.jooq.tables;


import com.github.propan.teabuddy.repository.jooq.Keys;
import com.github.propan.teabuddy.repository.jooq.Public;
import com.github.propan.teabuddy.repository.jooq.tables.records.CrawlersRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Crawlers extends TableImpl<CrawlersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.CRAWLERS</code>
     */
    public static final Crawlers CRAWLERS = new Crawlers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CrawlersRecord> getRecordType() {
        return CrawlersRecord.class;
    }

    /**
     * The column <code>PUBLIC.CRAWLERS.ID</code>.
     */
    public final TableField<CrawlersRecord, UUID> ID = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CRAWLERS.NAME</code>.
     */
    public final TableField<CrawlersRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.CRAWLERS.ENABLED</code>.
     */
    public final TableField<CrawlersRecord, Boolean> ENABLED = createField(DSL.name("ENABLED"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>PUBLIC.CRAWLERS.LAST_CRAWLED_AT</code>.
     */
    public final TableField<CrawlersRecord, LocalDateTime> LAST_CRAWLED_AT = createField(DSL.name("LAST_CRAWLED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>PUBLIC.CRAWLERS.LAST_RESULT</code>.
     */
    public final TableField<CrawlersRecord, JSON> LAST_RESULT = createField(DSL.name("LAST_RESULT"), SQLDataType.JSON, this, "");

    /**
     * The column <code>PUBLIC.CRAWLERS.NEXT_CRAWL_AT</code>.
     */
    public final TableField<CrawlersRecord, LocalDateTime> NEXT_CRAWL_AT = createField(DSL.name("NEXT_CRAWL_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Crawlers(Name alias, Table<CrawlersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Crawlers(Name alias, Table<CrawlersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.CRAWLERS</code> table reference
     */
    public Crawlers(String alias) {
        this(DSL.name(alias), CRAWLERS);
    }

    /**
     * Create an aliased <code>PUBLIC.CRAWLERS</code> table reference
     */
    public Crawlers(Name alias) {
        this(alias, CRAWLERS);
    }

    /**
     * Create a <code>PUBLIC.CRAWLERS</code> table reference
     */
    public Crawlers() {
        this(DSL.name("CRAWLERS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CrawlersRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9;
    }

    @Override
    public Crawlers as(String alias) {
        return new Crawlers(DSL.name(alias), this);
    }

    @Override
    public Crawlers as(Name alias) {
        return new Crawlers(alias, this);
    }

    @Override
    public Crawlers as(Table<?> alias) {
        return new Crawlers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Crawlers rename(String name) {
        return new Crawlers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Crawlers rename(Name name) {
        return new Crawlers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Crawlers rename(Table<?> name) {
        return new Crawlers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crawlers where(Condition condition) {
        return new Crawlers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crawlers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crawlers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crawlers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Crawlers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Crawlers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Crawlers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Crawlers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crawlers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Crawlers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
